"""The script fill database tables

Script requires tables to link the specified data with ORM models,
Session - to add data to the correct PostgreSQL session, ClassId - to
select the correct class identifier, IntEnum - to create an enumeration
of class types
"""

import tables as t
from sqlalchemy.orm import Session  # type: ignore
from enum import IntEnum
from character_classes import INIT_HP, ClassID, QuestKind
from typing import List


class ItemBuff(IntEnum):
    """Item buff enumerate"""

    HP = 1
    DAMAGE = 2
    DEFENSE = 3


def fill_database(session: Session) -> None:
    """Fill databases with start values

    Parametersl
    ----------
    session : Session
        The PostgreSQL session
    """

    civils_id = range(1, 11)
    condattieri_id = range(11, 21)
    corsairs_id = range(21, 31)

    text: str = "–ù–æ–≤–∞—è –∏–≥—Ä–∞ | SAVE ID 1"
    session.add(t.Save(id=1, description=text, time=0))
    fill_classes(session)
    fill_persons(session)
    fill_items(session)
    fill_weapons(session)
    fill_persons_items(session, civils_id, condattieri_id, corsairs_id)
    fill_persons_weapons(session, civils_id, condattieri_id, corsairs_id)
    quests: List[t.Quest] = fill_quests(session)
    fill_persons_quests(session, quests)


def fill_classes(session: Session) -> None:
    """Fill classes table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    """

    session.add_all(
        [
            t.Class(id=ClassID.CIVIL, name="–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å"),
            t.Class(id=ClassID.CONDOTR, name="–ö–æ–Ω–¥–æ—Ç—å–µ—Ä"),
            t.Class(id=ClassID.CORSAIR, name="–ö–æ—Ä—Å–∞—Ä"),
        ]
    )
    session.commit()


def fill_persons(session: Session) -> None:
    """Fill persons table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    """

    p: List[t.Person] = []
    SID: int = 1
    ID: int = 1

    def add_person(cid, ico, name, lvl, lid, pos):
        nonlocal ID
        person = t.Person(id=ID, class_id=cid, save_id=SID, appearance=ico)
        ID += 1
        person.name = name
        person.level = lvl
        person.location_id = lid
        person._Person__pos = pos
        person.hp = INIT_HP + person.level * 5
        p.append(person)

    def add_civ(name, lvl, lid, pos):
        ico = "üôé‚Äç‚ôÇÔ∏è"
        add_person(ClassID.CIVIL, ico, name, lvl, lid, pos)

    add_civ(name="–î–∂–æ–≤–∞–Ω–Ω–∏ –ß–∏—á–∏–∫–æ–≤", lvl=1, lid=1, pos=[3, 3])
    add_civ(name="–ê–ª—å–±–µ—Ä—Ç–æ –°–∏–Ω–∏—á–∫–∏–Ω", lvl=2, lid=2, pos=[12, 13])
    add_civ(name="–ù–∏–∫–∫–æ–ª–æ –†–æ–º–∞–Ω–æ–≤", lvl=3, lid=3, pos=[1, 3])
    add_civ(name="–ú–∞—Å—Å–∏–º–æ –ò–≤–∞–Ω–æ–≤", lvl=4, lid=4, pos=[1, 21])
    add_civ(name="–î–∂–∞–∫–æ–º–æ –•–∞–º–∞—Ç–¥–∏–Ω–æ–≤", lvl=4, lid=5, pos=[9, 4])
    add_civ(name="–õ–µ–æ–Ω–∞—Ä–¥–æ –ú–∞–∫–∞—Ä–æ–≤", lvl=3, lid=6, pos=[13, 15])
    add_civ(name="–ö—Ä–∏—Å—Ç–∏–∞–Ω –•–∞—Ä–∏–æ–Ω–æ–≤", lvl=4, lid=7, pos=[11, 3])
    add_civ(name="–§—Ä–∞–Ω—á–µ–∫—Å–æ –°–æ–±–æ–ª–µ–≤", lvl=4, lid=8, pos=[5, 16])
    add_civ(name="–†–æ–±–µ—Ä—Ç–æ –°—Ç–µ—á–∫–∏–Ω", lvl=4, lid=9, pos=[4, 3])
    add_civ(name="–ú–∞—Ç—Ç–µ–æ –¢–∞–ø–æ—á–∫–∏–Ω", lvl=4, lid=10, pos=[9, 1])
    add_civ(name="–î–∂–∞–Ω–∫–∞—Ä–ª–æ –≠—Å–ø–æ–∑–∏—Ç–æ", lvl=3, lid=11, pos=[15, 1])
    add_civ(name="–ê–±—Ä–∏–≥–∞–¥–æ –¢–æ–±–∞–∫–∫–æ", lvl=2, lid=12, pos=[19, 1])
    add_civ(name="–ê–ª—å—Ñ—Ä–µ–¥–æ –¥–∏ –°—Ç–µ—Ñ–∞–Ω–æ", lvl=1, lid=13, pos=[4, 3])
    add_civ(name="–î–∏–¥—å–µ –î–µ—à–∞–º", lvl=4, lid=1, pos=[14, 5])
    add_civ(name="–ê–Ω–¥—Ä–µ–∞ –ü–∏—Ä–ª–æ", lvl=1, lid=2, pos=[4, 0])
    add_civ(name="–ê–Ω—Ç–æ–Ω–∏–æ –ú–∞—Ä–≥–∞—Ä–µ—Ç—Ç–∏", lvl=1, lid=3, pos=[6, 5])
    add_civ(name="–î–æ–º–∏–Ω–∏–∫ –¥–µ –ö–æ–∫–∫–æ", lvl=1, lid=4, pos=[7, 4])
    add_civ(name="–§—Ä–∞–Ω—á–µ—Å–∫–æ –ì–æ—Ä–ª–æ–º–∏", lvl=2, lid=5, pos=[17, 0])
    add_civ(name="–ö—Ä–∏—Å—Ç–æ—Ñ—Ñ –í–∞–ª—å—Ü", lvl=2, lid=6, pos=[16, 0])
    add_civ(name="–ú–∞—Ç–µ–æ –ö–æ–≤–∞—á–∏—á", lvl=1, lid=7, pos=[8, 1])
    add_civ(name="–û–ª–µ–≥–æ—Å –õ–æ–±–∞–Ω–æ–≤—Å–∫–∏", lvl=1, lid=8, pos=[8, 1])

    def add_con(name, lvl, lid, pos):
        ico = "üíÇüèº"
        add_person(ClassID.CONDOTR, ico, name, lvl, lid, pos)

    add_con(name="–ò–≤–∞–Ω –ú–µ–¥–∏—á–∏", lvl=1, lid=9, pos=[1, 5])
    add_con(name="–†—É—Å–ª–∞–Ω –¥–∞ –°–∞–Ω –°–µ–≤–µ—Ä–∏–Ω–æ", lvl=2, lid=10, pos=[1, 11])
    add_con(name="–ù–∏–∫–æ–ª–∞–π –°—Ñ–æ—Ä—Ü–∞", lvl=2, lid=11, pos=[5, 7])
    add_con(name="–û–ª–µ–≥ –ü–∞–ª—å–º–µ—Ä–∏", lvl=4, lid=12, pos=[5, 8])
    add_con(name="–í–ª–∞–¥–∏–º–∏—Ä –ú–∞—Ä—Ç–∏–Ω–∏", lvl=4, lid=13, pos=[12, 5])
    add_con(name="–ò–ª—å–Ω—É—Ä –ö–æ—Å—Ç–∞", lvl=3, lid=1, pos=[13, 13])
    add_con(name="–î–µ–Ω–∏—Å –†–∏—á—á–∏", lvl=3, lid=1, pos=[14, 6])
    add_con(name="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –†–æ—Å—Å–∏", lvl=2, lid=3, pos=[2, 7])
    add_con(name="–§–µ–¥–æ—Ä –§–∞–±—Ä–∏—Ü–∏", lvl=4, lid=4, pos=[9, 9])
    add_con(name="–õ–µ–æ–Ω–∏–¥ –õ—É–∫–∫–µ–∑–∏", lvl=4, lid=5, pos=[11, 15])
    add_con(name="–°–æ—Å–∫–µ –ê–π–¥–∑–µ–Ω", lvl=4, lid=6, pos=[16, 5])
    add_con(name="–°–µ–≤–µ—Ä—É—Å –°–Ω–µ–π–ø", lvl=3, lid=7, pos=[19, 1])
    add_con(name="–ú–∞—Ä–∫–æ –†–æ–π—Å", lvl=2, lid=8, pos=[8, 8])
    add_con(name="–î–∂–∞–Ω–ª—É–∏–¥–∂–∏ –ë—É—Ñ—Ñ–æ–Ω", lvl=2, lid=9, pos=[12, 7])
    add_con(name="–ú–∞—Å–∫–∞—Ä–ø–æ–Ω–µ –ü–∞–ª–∞—Ü—Ü–æ", lvl=4, lid=10, pos=[16, 1])
    add_con(name="–ú–∞—Å—Å–∏–º–∏–ª–∏–∞–Ω–æ –ê–ª–ª–µ–≥—Ä–∏", lvl=1, lid=11, pos=[2, 2])
    add_con(name="–ö–ª–∞—É–¥–∏–æ –†–∞–Ω—å–µ—Ä–∏", lvl=1, lid=12, pos=[3, 3])
    add_con(name="–ö–µ–Ω–ø–∞—á–∏ –î–∑–∞—Ä–∞–∫–∏", lvl=3, lid=13, pos=[9, 20])
    add_con(name="–§—Ä–∞–Ω—á–µ—Å–∫–æ –¢–æ—Ç—Ç–∏", lvl=2, lid=1, pos=[0, 7])
    add_con(name="–í–∏–Ω—Å–µ–Ω—Ç –≤–∞–Ω –ì–æ–≥", lvl=4, lid=2, pos=[15, 4])
    add_con(name="–ï–≤–ø–∞—Ç–∏–π –ö–æ–ª–æ–≤—Ä–∞—Ç", lvl=4, lid=3, pos=[7, 13])
    add_con(name="–Ø—Ä–æ–º–∏—Ä –ú–µ–Ω–¥–µ–ª—å—Å–æ–Ω", lvl=2, lid=4, pos=[0, 15])

    def add_cor(name, lvl, lid, pos):
        ico = "üë≥üèº‚Äç‚ôÇÔ∏è"
        add_person(ClassID.CORSAIR, ico, name, lvl, lid, pos)

    add_cor(name="–ê–ª–∏ –ö–ª–∞–π–¥", lvl=2, lid=5, pos=[1, 6])
    add_cor(name="–°–∞–ª–∏–º –í–æ—Ä–æ–±–µ–π", lvl=2, lid=6, pos=[2, 9])
    add_cor(name="–î–∂–∞–º–∞–ª –ö–æ—Ä–ª–µ–æ–Ω–µ", lvl=2, lid=7, pos=[7, 7])
    add_cor(name="–ú—É—Å—Ç–∞—Ñ–∞ –†–æ–º–∞–Ω–æ", lvl=3, lid=8, pos=[16, 3])
    add_cor(name="–ö–∞—Ä–∏–º –ö–∞—Å—Ç–∏–ª–∏—è", lvl=3, lid=9, pos=[12, 12])
    add_cor(name="–ê—à—Ä–∞—Ñ –õ–µ–æ–Ω–∏", lvl=3, lid=10, pos=[12, 3])
    add_cor(name="–°–∞–º–∏—Ä –í–µ–Ω–¥–µ—Ç—Ç–∞", lvl=4, lid=11, pos=[12, 4])
    add_cor(name="–û–º–∞—Ä –ö–∞–ø–æ–Ω–µ", lvl=3, lid=12, pos=[6, 16])
    add_cor(name="–°—É–ª–µ–π–º–∞–Ω –õ–∏–Ω—á", lvl=2, lid=13, pos=[5, 15])
    add_cor(name="–ê—Ö–º–µ–¥ –§–ª–æ–π–¥", lvl=3, lid=1, pos=[0, 14])
    add_cor(name="–ò–≤–∞–Ω –ú–µ–¥–∏—á–∏", lvl=4, lid=2, pos=[17, 20])
    add_cor(name="–ñ–æ–∑–µ –ú–æ—É—Ä–∏–Ω—å–æ", lvl=2, lid=3, pos=[14, 10])
    add_cor(name="–ì–µ–Ω—Ä–∏—Ö V", lvl=4, lid=4, pos=[15, 13])
    add_cor(name="–ú–µ—Å—É—Ç –û–∑–∏–ª", lvl=1, lid=5, pos=[0, 3])
    add_cor(name="–ú–∞—Ä—Ç–∏–Ω –õ—é—Ç–µ—Ä", lvl=1, lid=6, pos=[8, 2])
    add_cor(name="–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", lvl=4, lid=7, pos=[13, 13])
    add_cor(name="–ì–≤–∏–¥–æ –ú–∏—Å—Ç–∞", lvl=3, lid=8, pos=[16, 11])
    add_cor(name="–î–æ–ø–ø–∏–æ –î—å—è–≤–æ–ª–æ", lvl=4, lid=9, pos=[18, 21])
    add_cor(name="–î–∂–æ—Ä–Ω–æ –î–∂–æ–≤–∞–Ω–Ω–∞", lvl=1, lid=10, pos=[2, 2])
    add_cor(name="–ñ–∞–Ω –ü—å–µ—Ä", lvl=1, lid=11, pos=[7, 3])
    add_cor(name="–ò–±—Ä–∞–≥–∏–º –ü–∞—à–∞", lvl=3, lid=12, pos=[6, 20])
    add_cor(name="–ú–∞–π–∫ –¢–∞–π—Å–æ–Ω", lvl=4, lid=13, pos=[14, 16])
    add_cor(name="–•–æ–±—É—Ç—É—Å –ü–ª—É—Ç–æ–≤–∏—á", lvl=1, lid=1, pos=[17, 21])

    for person in p:
        setattr(person, "is_protagonist", False)
    session.add_all(p)
    session.commit()


def fill_items(session: Session) -> None:
    """Fill items table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    """

    items: List[t.Item] = []
    items.append(
        t.Item(
            name="–ü–∏–∞—Å—Ç—Ä–∞",
            description="–ó–æ–ª–æ—Ç–∞—è –º–æ–Ω–µ—Ç–∞, –º–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞",
            is_tradable=True,
            cost=1,
        )
    )
    # hats
    items.append(
        t.Item(
            name="–ë–µ—Ä–µ—Ç", description="–ë–µ—Ä–µ—Ç –º–∏—Ä–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è", is_tradable=False
        )
    )
    items.append(
        t.Item(
            name="–ë–µ—Ä–µ—Ç",
            description="–ë–µ—Ä–µ—Ç –º–∏—Ä–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è",
            is_tradable=True,
            cost=5,
        )
    )

    items.append(
        t.Item(
            name="–ö—Ä–∞—Å–Ω–∞—è —à–ª—è–ø–∞",
            buff_parameter=ItemBuff.DAMAGE,
            buff=3,
            description="–®–ª—è–ø–∞ –∫–æ–Ω–¥–æ—Ç—å–µ—Ä–∞",
            is_tradable=False,
        )
    )
    items.append(
        t.Item(
            name="–ö—Ä–∞—Å–Ω–∞—è —à–ª—è–ø–∞",
            buff_parameter=ItemBuff.DAMAGE,
            buff=3,
            description="–®–ª—è–ø–∞ –∫–æ–Ω–¥–æ—Ç—å–µ—Ä–∞",
            is_tradable=True,
            cost=10,
        )
    )

    items.append(
        t.Item(
            name="–ß–µ—Ä–Ω–∞—è —à–ª—è–ø–∞",
            buff_parameter=ItemBuff.HP,
            buff=2,
            description="–®–ª—è–ø–∞ –∫–æ—Ä—Å–∞—Ä–∞",
            is_tradable=False,
        )
    )
    items.append(
        t.Item(
            name="–ß–µ—Ä–Ω–∞—è —à–ª—è–ø–∞",
            buff_parameter=ItemBuff.HP,
            buff=2,
            description="–®–ª—è–ø–∞ –∫–æ—Ä—Å–∞—Ä–∞",
            is_tradable=True,
            cost=10,
        )
    )

    items.append(
        t.Item(
            name="–ó–µ–ª–µ–Ω–∞—è —à–ª—è–ø–∞",
            buff_parameter=ItemBuff.HP,
            buff=5,
            description="–®–ª—è–ø–∞ –∫–æ—Ä—Å–∞—Ä–∞-–≥–ª–∞–≤–∞—Ä—è",
            is_tradable=False,
        )
    )
    items.append(
        t.Item(
            name="–ó–µ–ª–µ–Ω–∞—è —à–ª—è–ø–∞",
            buff_parameter=ItemBuff.HP,
            buff=5,
            description="–®–ª—è–ø–∞ –∫–æ—Ä—Å–∞—Ä–∞-–≥–ª–∞–≤–∞—Ä—è",
            is_tradable=True,
            cost=50,
        )
    )

    # clothes
    bp: int = ItemBuff.DEFENSE
    items.append(
        t.Item(
            name="–ì–æ–ª–æ–µ —Ç–µ–ª–æ",
            buff_parameter=bp,
            buff=0,
            description="–ë–µ–∑ –æ–¥–µ–∂–¥—ã",
            is_tradable=False,
        )
    )

    items.append(
        t.Item(
            name="–ö–æ–∂–∞–Ω—ã–π –∫–∞–º–∑–æ–ª",
            buff_parameter=bp,
            buff=5,
            description="–û–¥–µ–∂–¥–∞ –∫–æ—Ä—Å–∞—Ä–∞",
            is_tradable=False,
        )
    )
    items.append(
        t.Item(
            name="–ö–æ–∂–∞–Ω—ã–π –∫–∞–º–∑–æ–ª",
            buff_parameter=bp,
            buff=5,
            description="–û–¥–µ–∂–¥–∞ –∫–æ—Ä—Å–∞—Ä–∞",
            is_tradable=True,
            cost=50,
        )
    )

    items.append(
        t.Item(
            name="–°—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫",
            is_tradable=False,
            buff_parameter=bp,
            buff=10,
            description="–ó–∞—â–∏—Ç–∞ –∫–æ–Ω–¥–æ—Ç—å–µ—Ä–∞",
        )
    )
    items.append(
        t.Item(
            name="–°—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫",
            is_tradable=True,
            buff_parameter=bp,
            buff=10,
            description="–ó–∞—â–∏—Ç–∞ –∫–æ–Ω–¥–æ—Ç—å–µ—Ä–∞",
            cost=70,
        )
    )

    items.append(
        t.Item(
            name="–õ—å–Ω—è–Ω–∞—è —Ä—É–±–∞—à–∫–∞",
            is_tradable=False,
            buff_parameter=bp,
            buff=1,
            description="–ü—Ä–æ—Å—Ç–∞—è –æ–¥–µ–∂–¥–∞",
        )
    )
    items.append(
        t.Item(
            name="–õ—å–Ω—è–Ω–∞—è —Ä—É–±–∞—à–∫–∞",
            is_tradable=True,
            buff_parameter=bp,
            buff=1,
            description="–ü—Ä–æ—Å—Ç–∞—è –æ–¥–µ–∂–¥–∞",
            cost=20,
        )
    )

    # food
    items.append(
        t.Item(
            name="–†–æ–º",
            buff_parameter=ItemBuff.DAMAGE,
            buff=3,
            description="–õ—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –∫–æ—Ä—Å–∞—Ä–∞",
            duration=5,
            is_tradable=True,
            cost=3,
        )
    )
    items.append(
        t.Item(
            name="–í–∏–Ω–æ",
            buff_parameter=ItemBuff.HP,
            buff=1,
            description="–õ—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –∂–∏—Ç–µ–ª—è",
            duration=5,
            is_tradable=True,
            cost=3,
        )
    )
    items.append(
        t.Item(
            name="–ü–∏–≤–æ",
            buff_parameter=ItemBuff.DEFENSE,
            buff=3,
            description="–õ—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –∫–æ–Ω–¥–æ—Ç—å–µ—Ä–∞",
            duration=5,
            is_tradable=True,
            cost=3,
        )
    )
    items.append(
        t.Item(
            name="–í—è–ª–µ–Ω–æ–µ –º—è—Å–æ",
            buff_parameter=ItemBuff.HP,
            buff=5,
            is_tradable=True,
            cost=4,
            description="–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞",
        )
    )
    items.append(
        t.Item(
            name="–ì–∞–ª–µ—Ç—ã",
            buff_parameter=ItemBuff.HP,
            buff=3,
            description="–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞",
            is_tradable=True,
            cost=2,
        )
    )
    items.append(
        t.Item(
            name="–ñ–∞—Ä–µ–Ω–∞—è —Ä—ã–±–∞",
            buff_parameter=ItemBuff.HP,
            buff=4,
            is_tradable=True,
            cost=3,
            description="–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞",
        )
    )

    # special
    items.append(t.Item(name="–ö–∞—Ä—Ç–∞ —Å –∫–ª–∞–¥–æ–º", is_tradable=False))
    items.append(
        t.Item(
            name="–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
            buff_parameter=ItemBuff.DAMAGE,
            buff=1,
            description="–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∫–æ–Ω–¥–æ—Ç—å–µ—Ä–∞",
            is_tradable=False,
        )
    )

    # quest
    items.append(t.Item(name="–ü–∏—Å—å–º–æ –¥—Ä—É–≥–∞", is_tradable=True))
    items.append(t.Item(name="–ë—É—Ç—ã–ª–∫–∞ –≤–∏–Ω–∞", is_tradable=True))
    items.append(t.Item(name="–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä—Å–∞—Ä–∞", is_tradable=False))
    session.add_all(items)
    session.commit()


def fill_weapons(session: Session) -> None:
    """Fill weapons table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    """

    weapons: List[t.Weapon] = []

    text: str = "–ö—É–ª–∞–∫–∏"
    weapons.append(
        t.Weapon(name=text, range=1, dmg_min=0, dmg_max=1, is_tradable=False)
    )
    text = "–ö–æ—Ä—Ç–∏–∫"
    weapons.append(
        t.Weapon(
            name=text, range=1, dmg_min=0, dmg_max=2, is_tradable=True, cost=10
        )
    )
    weapons.append(
        t.Weapon(name=text, range=1, dmg_min=0, dmg_max=2, is_tradable=False)
    )
    text = "–¢–æ–ø–æ—Ä"
    weapons.append(
        t.Weapon(
            name=text, range=1, dmg_min=3, dmg_max=5, is_tradable=True, cost=20
        )
    )
    weapons.append(
        t.Weapon(name=text, range=1, dmg_min=3, dmg_max=5, is_tradable=False)
    )
    text = "–°–∞–±–ª—è"
    weapons.append(
        t.Weapon(
            name=text, range=1, dmg_min=4, dmg_max=6, is_tradable=True, cost=20
        )
    )
    weapons.append(
        t.Weapon(name=text, range=1, dmg_min=4, dmg_max=6, is_tradable=False)
    )

    text = "–ü–∏—Å—Ç–æ–ª–∏"
    weapons.append(
        t.Weapon(
            name=text,
            range=10,
            dmg_min=4,
            dmg_max=6,
            is_tradable=True,
            cost=40,
        )
    )
    weapons.append(
        t.Weapon(name=text, range=10, dmg_min=4, dmg_max=6, is_tradable=False)
    )
    text = "–ü–∞—Ä–Ω—ã–µ –ø–∏—Å—Ç–æ–ª–∏"
    weapons.append(
        t.Weapon(
            name=text,
            range=10,
            dmg_min=6,
            dmg_max=12,
            is_tradable=True,
            cost=80,
        )
    )
    weapons.append(
        t.Weapon(name=text, range=10, dmg_min=6, dmg_max=12, is_tradable=False)
    )
    text = "–†—É–∂—å–µ"
    weapons.append(
        t.Weapon(
            name=text,
            range=20,
            dmg_min=5,
            dmg_max=10,
            is_tradable=True,
            cost=140,
        )
    )
    weapons.append(
        t.Weapon(name=text, range=20, dmg_min=5, dmg_max=10, is_tradable=False)
    )
    session.add_all(weapons)
    session.commit()


def fill_persons_items(session: Session, civ_id, con_id, cor_id) -> None:
    """Fill persons table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    civ_id : range
        The range of civilians id
    con_id : range
        The range of condottieri id
    cor_id : range
        The range of corsairs id
    """

    SID: int = 1
    civils: List[t.Person_Item] = []
    hat = (
        session.query(t.Item)
        .filter_by(name="–ë–µ—Ä–µ—Ç", is_tradable=False)
        .first()
    )
    cloth = (
        session.query(t.Item)
        .filter_by(name="–õ—å–Ω—è–Ω–∞—è —Ä—É–±–∞—à–∫–∞", is_tradable=False)
        .first()
    )
    food = (
        session.query(t.Item)
        .filter_by(name="–í—è–ª–µ–Ω–æ–µ –º—è—Å–æ", is_tradable=True)
        .first()
    )
    alco = (
        session.query(t.Item).filter_by(name="–í–∏–Ω–æ", is_tradable=True).first()
    )
    for i in civ_id:
        if hat and cloth and food and alco:
            civils.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=hat.id, quantity=1
                )
            )
            civils.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=cloth.id, quantity=1
                )
            )
            civils.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=food.id, quantity=1
                )
            )
            civils.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=alco.id, quantity=1
                )
            )

    item = (
        session.query(t.Item)
        .filter_by(name="–ö–∞—Ä—Ç–∞ —Å –∫–ª–∞–¥–æ–º", is_tradable=False)
        .first()
    )
    (
        civils.append(
            t.Person_Item(
                person_id="1", save_id=SID, item_id=item.id, quantity=1
            )
        )
        if item
        else None
    )
    item = (
        session.query(t.Item).filter_by(name="–ë–µ—Ä–µ—Ç", is_tradable=True).first()
    )
    (
        civils.append(
            t.Person_Item(
                person_id="1", save_id=SID, item_id=item.id, quantity=1
            )
        )
        if item
        else None
    )

    condots: List[t.Person_Item] = []
    hat = (
        session.query(t.Item)
        .filter_by(name="–ö—Ä–∞—Å–Ω–∞—è —à–ª—è–ø–∞", is_tradable=False)
        .first()
    )
    cloth = (
        session.query(t.Item)
        .filter_by(name="–°—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫", is_tradable=False)
        .first()
    )
    food = (
        session.query(t.Item)
        .filter_by(name="–ì–∞–ª–µ—Ç—ã", is_tradable=True)
        .first()
    )
    alco = (
        session.query(t.Item).filter_by(name="–ü–∏–≤–æ", is_tradable=True).first()
    )
    item = (
        session.query(t.Item)
        .filter_by(name="–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ", is_tradable=False)
        .first()
    )
    for i in con_id:
        if hat and cloth and food and alco and item:
            condots.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=hat.id, quantity=1
                )
            )
            condots.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=cloth.id, quantity=1
                )
            )
            condots.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=food.id, quantity=1
                )
            )
            condots.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=alco.id, quantity=1
                )
            )
            condots.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=item.id, quantity=1
                )
            )

    alco = session.query(t.Item).filter_by(name="–†–æ–º").first()
    (
        condots.append(
            t.Person_Item(
                person_id="11", save_id=SID, item_id=alco.id, quantity=10
            )
        )
        if alco
        else None
    )

    corsairs: List[t.Person_Item] = []
    hat = (
        session.query(t.Item)
        .filter_by(name="–ß–µ—Ä–Ω–∞—è —à–ª—è–ø–∞", is_tradable=False)
        .first()
    )
    cloth = (
        session.query(t.Item)
        .filter_by(name="–ö–æ–∂–∞–Ω—ã–π –∫–∞–º–∑–æ–ª", is_tradable=False)
        .first()
    )
    food = (
        session.query(t.Item)
        .filter_by(name="–ñ–∞—Ä–µ–Ω–∞—è —Ä—ã–±–∞", is_tradable=True)
        .first()
    )
    for i in cor_id:
        if hat and cloth and food and alco:
            corsairs.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=hat.id, quantity=1
                )
            )
            condots.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=cloth.id, quantity=1
                )
            )
            corsairs.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=food.id, quantity=1
                )
            )
            corsairs.append(
                t.Person_Item(
                    person_id=str(i), save_id=SID, item_id=alco.id, quantity=1
                )
            )

    item = (
        session.query(t.Item)
        .filter_by(name="–ó–µ–ª–µ–Ω–∞—è —à–ª—è–ø–∞", is_tradable=False)
        .first()
    )
    (
        corsairs.append(
            t.Person_Item(
                person_id="30", save_id=SID, item_id=item.id, quantity=11
            )
        )
        if item
        else None
    )

    session.add_all(civils + condots + corsairs)
    session.commit()


def fill_persons_weapons(session: Session, civ_id, con_id, cor_id) -> None:
    """Fill persons_weapons table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    civ_id : range
        The range of civilians id
    con_id : range
        The range of condottieri id
    cor_id : range
        The range of corsairs id
    """

    SID: int = 1
    fists = session.query(t.Weapon).filter_by(name="–ö—É–ª–∞–∫–∏").first()
    civils = (
        [
            t.Person_Weapon(person_id=str(i), save_id=SID, weapon_id=fists.id)
            for i in civ_id
        ]
        if fists
        else []
    )
    weapon = (
        session.query(t.Weapon)
        .filter_by(name="–ö–æ—Ä—Ç–∏–∫", is_tradable=False)
        .first()
    )
    if weapon:
        civils += [
            t.Person_Weapon(person_id="1", save_id=SID, weapon_id=weapon.id)
        ]
        civils += [
            t.Person_Weapon(person_id="2", save_id=SID, weapon_id=weapon.id)
        ]
    weapon = (
        session.query(t.Weapon)
        .filter_by(name="–ü–∞—Ä–Ω—ã–µ –ø–∏—Å—Ç–æ–ª–∏", is_tradable=True)
        .first()
    )
    civils += (
        [t.Person_Weapon(person_id="1", save_id=SID, weapon_id=weapon.id)]
        if weapon
        else []
    )

    weapon = (
        session.query(t.Weapon)
        .filter_by(name="–°–∞–±–ª—è", is_tradable=False)
        .first()
    )
    condots = (
        [
            t.Person_Weapon(person_id=str(i), save_id=SID, weapon_id=weapon.id)
            for i in con_id
        ]
        if weapon
        else []
    )
    weapon = (
        session.query(t.Weapon)
        .filter_by(name="–†—É–∂—å–µ", is_tradable=False)
        .first()
    )
    condots += (
        [t.Person_Weapon(person_id="20", save_id=SID, weapon_id=weapon.id)]
        if weapon
        else []
    )

    weapon = (
        session.query(t.Weapon)
        .filter_by(name="–¢–æ–ø–æ—Ä", is_tradable=False)
        .first()
    )
    corsairs = (
        [
            t.Person_Weapon(person_id=str(i), save_id=SID, weapon_id=weapon.id)
            for i in cor_id
        ]
        if weapon
        else []
    )
    weapon = (
        session.query(t.Weapon)
        .filter_by(name="–ü–∞—Ä–Ω—ã–µ –ø–∏—Å—Ç–æ–ª–∏", is_tradable=False)
        .first()
    )
    condots += (
        [t.Person_Weapon(person_id="30", save_id=SID, weapon_id=weapon.id)]
        if weapon
        else []
    )
    session.add_all(civils + condots + corsairs)
    session.commit()


def fill_quests(session: Session) -> List[t.Quest]:
    """Fill quests table

    Parameters
    ----------
    session : Session
        The PostgreSQL session
    """

    quests: List[t.Quest] = []

    brief: str = "–°–ª–µ–¥—ã –∫–æ—Ç–∞"
    text: str = "–í–∏–¥–∏—à—å —Å–ª–µ–¥—ã –≤–æ–∫—Ä—É–≥? –ü—Ä–æ—Å–ª–µ–¥–∏, –º–æ–∂–µ—Ç —ç—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç —Ç–µ–±—è –∫ –∫–æ—Ç—É"
    rec = (
        session.query(t.Person)
        .filter_by(name="–î–µ–Ω–∏—Å –†–∏—á—á–∏", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–î–∂–æ–≤–∞–Ω–Ω–∏ –ß–∏—á–∏–∫–æ–≤", save_id=1)
        .first()
    )
    if rec and giv:
        condition: str = f"npc.id == str({rec.id})"
        item: str = "üêæ"
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=1,
                kind=QuestKind.TRACE,
                reward=1000,
                item=item,
                receiving_npc_id=rec.id,
                giving_npc_id=giv.id,
                condition=condition,
                class_id=ClassID.CONDOTR,
            )
        )

    brief = "–ü–∏—Å—å–º–æ –¥–ª—è —Å–æ—Å–ª—É–∂–∏–≤—Ü–∞"
    text = "–ü–µ—Ä–µ–¥–∞–π –ø–∏—Å—å–º–æ –º–æ–µ–º—É —Ç–æ–≤–∞—Ä–∏—â—É, –∏ –ø—Ä–∏—Ö–æ–¥–∏ –æ–±—Ä–∞—Ç–Ω–æ"
    rec = (
        session.query(t.Person)
        .filter_by(name="–§—Ä–∞–Ω—á–µ—Å–∫–æ –¢–æ—Ç—Ç–∏", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–î–µ–Ω–∏—Å –†–∏—á—á–∏", save_id=1)
        .first()
    )
    item = "–ü–∏—Å—å–º–æ –¥—Ä—É–≥–∞"
    if rec and giv:
        condition = f"npc.id == str({rec.id})"
        reward_item: str = "–ö–æ—Ä—Ç–∏–∫"
        reward_item_quantity: int = 1
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                item=item,
                condition=condition,
                reward=1000,
                location_id=1,
                receiving_npc_id=rec.id,
                giving_npc_id=giv.id,
                kind=QuestKind.DELIVERY,
                class_id=ClassID.CONDOTR,
                reward_item=reward_item,
                reward_item_quantity=reward_item_quantity,
            )
        )

    brief = "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"
    text = "–í—ã–∏–≥—Ä–∞–π –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ —É –î–µ–Ω–∏—Å–∞ –†–∏—á—á–∏"
    giv = (
        session.query(t.Person)
        .filter_by(name="–î–µ–Ω–∏—Å –†–∏—á—á–∏", save_id=1)
        .first()
    )
    item = "False"
    if giv:
        condition = (
            f"npc.id == {giv.id} and {brief} in [q.brief for q in"
            " self.questbook] and [q for q in self.questbook if q.brief =="
            f" {brief}][0].item == 'True'"
        )
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                condition=condition,
                item=item,
                reward=1000,
                location_id=1,
                giving_npc_id=giv.id,
                kind=QuestKind.TIC_TAC_TOE,
                class_id=ClassID.CONDOTR,
            )
        )

    brief = "–ü–æ–¥—Å—Ç–∞–≤–∞"
    text = "–ù–∞–π–¥–∏ –û–º–∞—Ä–∞ –ö–∞–ø–æ–Ω–µ –≤–æ –≤—Ç–æ—Ä–æ–π –∑–∞–ø–∞–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏."
    rec = (
        session.query(t.Person)
        .filter_by(name="–û–º–∞—Ä –ö–∞–ø–æ–Ω–µ", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–î–∂–æ–≤–∞–Ω–Ω–∏ –ß–∏—á–∏–∫–æ–≤", save_id=1)
        .first()
    )
    if rec and giv:
        condition = f"npc.id == str({rec.id})"
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=1,
                kind=QuestKind.FIND,
                reward=1000,
                receiving_npc_id=rec.id,
                giving_npc_id=giv.id,
                condition=condition,
                class_id=ClassID.CORSAIR,
            )
        )

    brief = "–¢–æ—Ç —Å–∞–º—ã–π.. –†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ"
    text = "–ù–∞–π–¥–∏ –†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ –≤ —Ç—Ä–µ—Ç—å–µ–π —é–∂–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –ª–æ–∫–∞—Ü–∏–∏."
    rec = (
        session.query(t.Person)
        .filter_by(name="–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–û–º–∞—Ä –ö–∞–ø–æ–Ω–µ", save_id=1)
        .first()
    )
    if rec and giv:
        condition = f"npc.id == str({rec.id})"
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=1,
                kind=QuestKind.FIND,
                reward=1000,
                receiving_npc_id=rec.id,
                giving_npc_id=giv.id,
                condition=condition,
                class_id=ClassID.CORSAIR,
            )
        )

    brief = "–ë—É—Ç—ã–ª–∫–∞ –≤–∏–Ω–∞"
    text = "–ü—Ä–∏–Ω–µ—Å–∏ –≤–∏–Ω–∞ –¥–ª—è –†–∏–∑–æ—Ç—Ç–æ."
    rec = (
        session.query(t.Person)
        .filter_by(name="–î–∂–∞–º–∞–ª –ö–æ—Ä–ª–µ–æ–Ω–µ", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", save_id=1)
        .first()
    )
    if rec and giv:
        condition = f"npc.id == str({rec.id})"
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=7,
                kind=QuestKind.FIND,
                reward=1000,
                receiving_npc_id=rec.id,
                giving_npc_id=giv.id,
                condition=condition,
                class_id=ClassID.CORSAIR,
            )
        )

    brief = "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ —Å–º–µ–ª–æ—Å—Ç–∏"
    text = (
        "–û–¥–æ–ª–µ–π –°–µ–≤–µ—Ä—É—Å–∞ –°–Ω–µ–π–ø–∞ –∏ –ø—Ä–∏—Ö–æ–¥–∏ –∫ –ú–µ—Å—É—Ç—É –û–∑–∏–ª—É –≤ –ø–µ—Ä–≤—É—é —é–∂–Ω—É—é"
        " –ª–æ–∫–∞—Ü–∏—é."
    )
    rec = (
        session.query(t.Person)
        .filter_by(name="–°–µ–≤–µ—Ä—É—Å –°–Ω–µ–π–ø", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–î–∂–∞–º–∞–ª –ö–æ—Ä–ª–µ–æ–Ω–µ", save_id=1)
        .first()
    )
    if rec and giv:
        condition = f"npc.id ==str({rec.id})"
        reward_item = "–ë—É—Ç—ã–ª–∫–∞ –≤–∏–Ω–∞"
        reward_item_quantity = 1
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=7,
                kind=QuestKind.FIND,
                reward=2500,
                receiving_npc_id=rec.id,
                giving_npc_id=rec.id,
                condition=condition,
                class_id=ClassID.CORSAIR,
                reward_item=reward_item,
                reward_item_quantity=reward_item_quantity,
            )
        )

    brief = "–°–∏–ª—å–Ω–µ–π—à–∏–π"
    text = "–î–µ—Ä–∂–∏ –±—É—Ç–ª–∫—É –≤–∏–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –†–∏–∑–æ—Ç—Ç–æ"
    rec = (
        session.query(t.Person)
        .filter_by(name="–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person).filter_by(name="–ú–µ—Å—É—Ç –û–∑–∏–ª", save_id=1).first()
    )
    if rec and giv:
        condition = f"npc.id ==str({rec.id})"
        item = "–ë—É—Ç—ã–ª–∫–∞ –≤–∏–Ω–∞"
        reward_item = "–°–∞–±–ª—è"
        reward_item_quantity = 1
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=5,
                kind=QuestKind.DELIVERY,
                item=item,
                reward=3000,
                receiving_npc_id=rec.id,
                giving_npc_id=rec.id,
                condition=condition,
                class_id=ClassID.CORSAIR,
                reward_item=reward_item,
                reward_item_quantity=reward_item_quantity,
            )
        )

    brief = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
    text = "–û—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –∫ –î–∂–æ—Ä–Ω–æ –î–∂–æ–≤–∞–Ω–Ω–µ –≤ —Ç—Ä–µ—Ç—å—é –≤–æ—Å—Ç–æ—á–Ω—É—é –ª–æ–∫–∞—Ü–∏—é"
    rec = (
        session.query(t.Person)
        .filter_by(name="–î–∂–æ—Ä–Ω–æ –î–∂–æ–≤–∞–Ω–Ω–∞", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", save_id=1)
        .first()
    )
    if rec and giv:
        condition = f"npc.id ==str({rec.id})"
        reward_item = "–°—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫"
        reward_item_quantity = 1
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=10,
                kind=QuestKind.FIND,
                item=item,
                reward=1000,
                receiving_npc_id=rec.id,
                giving_npc_id=rec.id,
                condition=condition,
                class_id=ClassID.CORSAIR,
                reward_item=reward_item,
                reward_item_quantity=reward_item_quantity,
            )
        )

    brief = "–§–∏–Ω–∞–ª—å–Ω—ã–π –±–æ–π"
    text = ("–ù–∞–π–¥–∏ –í–∏–Ω—Å–µ–Ω—Ç–∞ –≤–∞–Ω –ì–æ–≥–∞ –≤ –ø–µ—Ä–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å–µ–≤–µ—Ä–∞ –∏ —Å—Ä–∞–∑–∏ –µ–≥–æ.\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –∫ –û–º–∞—Ä—É –ö–∞–ø–æ–µ–Ω–µ –≤–æ –≤—Ç–æ—Ä—É—é –∑–∞–ø–∞–¥–Ω—É—é –ª–æ–∫–∞—Ü–∏—é.")
    rec = (
        session.query(t.Person)
        .filter_by(name="–û–º–∞—Ä –ö–∞–ø–æ–Ω–µ", save_id=1)
        .first()
    )
    giv = (
        session.query(t.Person)
        .filter_by(name="–î–∂–æ—Ä–Ω–æ –î–∂–æ–≤–∞–Ω–Ω–∞", save_id=1)
        .first()
    )
    if rec and giv:
        condition = f"npc.id ==str({rec.id})"
        reward_item = "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä—Å–∞—Ä–∞"
        reward_item_quantity = 1
        quests.append(
            t.Quest(
                brief=brief,
                description=text,
                location_id=2,
                kind=QuestKind.FIND,
                reward=5000,
                receiving_npc_id=rec.id,
                giving_npc_id=rec.id,
                condition=condition,
                class_id=ClassID.CORSAIR,
                reward_item=reward_item,
                reward_item_quantity=reward_item_quantity,
            )
        )

    for q in quests:
        setattr(q, "is_done", False)
    session.add_all(quests)
    session.commit()
    return quests


def fill_persons_quests(session: Session, quests: List[t.Quest]) -> None:
    SID: int = 1
    persons_quests: List[t.Person_Quest] = []
    npc = (
        session.query(t.Person)
        .filter_by(name="–î–∂–æ–≤–∞–Ω–Ω–∏ –ß–∏—á–∏–∫–æ–≤", save_id=1)
        .first()
    )
    brief: str = "–°–ª–µ–¥—ã –∫–æ—Ç–∞"
    (
        persons_quests.append(
            t.Person_Quest(
                person_id=npc.id,
                save_id=SID,
                quest_id=[q.id for q in quests if q.brief == brief][0],
            )
        )
        if npc
        else None
    )

    npc = (
        session.query(t.Person)
        .filter_by(name="–î–µ–Ω–∏—Å –†–∏—á—á–∏", save_id=1)
        .first()
    )
    brief = "–ü–∏—Å—å–º–æ –¥–ª—è —Å–æ—Å–ª—É–∂–∏–≤—Ü–∞"
    persons_quests.append(
        t.Person_Quest(
            person_id=npc.id,
            save_id=SID,
            quest_id=[q.id for q in quests if q.brief == brief][0],
        )
    ) if npc else None

    brief = "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"
    persons_quests.append(
        t.Person_Quest(
            person_id=npc.id,
            save_id=SID,
            quest_id=[q.id for q in quests if q.brief == brief][0],
        )
    ) if npc else None

    npc = (
        session.query(t.Person)
        .filter_by(name="–î–∂–æ–≤–∞–Ω–Ω–∏ –ß–∏—á–∏–∫–æ–≤", save_id=1)
        .first()
    )

    brief = "–ü–æ–¥—Å—Ç–∞–≤–∞"
    (
        persons_quests.append(
            t.Person_Quest(
                person_id=npc.id,
                save_id=SID,
                quest_id=[q.id for q in quests if q.brief == brief][0],
            )
        )
        if npc
        else None
    )

    npc = (
        session.query(t.Person)
        .filter_by(name="–û–º–∞—Ä –ö–∞–ø–æ–Ω–µ", save_id=1)
        .first()
    )
    brief = "–¢–æ—Ç —Å–∞–º—ã–π.. –†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ"
    (
        persons_quests.append(
            t.Person_Quest(
                person_id=npc.id,
                save_id=SID,
                quest_id=[q.id for q in quests if q.brief == brief][0],
            )
        )
        if npc
        else None
    )

    npc = (
        session.query(t.Person)
        .filter_by(name="–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", save_id=1)
        .first()
    )
    brief = "–ë—É—Ç—ã–ª–∫–∞ –≤–∏–Ω–∞"
    (
        persons_quests.append(
            t.Person_Quest(
                person_id=npc.id,
                save_id=SID,
                quest_id=[q.id for q in quests if q.brief == brief][0],
            )
        )
        if npc
        else None
    )

    npc = (
        session.query(t.Person)
        .filter_by(name="–î–∂–∞–º–∞–ª –ö–æ—Ä–ª–µ–æ–Ω–µ", save_id=1)
        .first()
    )

    brief = "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ —Å–º–µ–ª–æ—Å—Ç–∏"
    (
        persons_quests.append(
            t.Person_Quest(
                person_id=npc.id,
                save_id=SID,
                quest_id=[q.id for q in quests if q.brief == brief][0],
            )
        )
        if npc
        else None
    )

    npc = (
        session.query(t.Person)
        .filter_by(name="–ú–µ—Å—É—Ç –û–∑–∏–ª", save_id=1)
        .first()
    )
    brief = "–°–∏–ª—å–Ω–µ–π—à–∏–π"
    persons_quests.append(
        t.Person_Quest(
            person_id=npc.id,
            save_id=SID,
            quest_id=[q.id for q in quests if q.brief == brief][0],
        )
    ) if npc else None

    npc = (
        session.query(t.Person)
        .filter_by(name="–†–∏–∑–æ—Ç—Ç–æ –ù–µ—Ä–æ", save_id=1)
        .first()
    )
    brief = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
    persons_quests.append(
        t.Person_Quest(
            person_id=npc.id,
            save_id=SID,
            quest_id=[q.id for q in quests if q.brief == brief][0],
        )
    ) if npc else None

    npc = (
        session.query(t.Person)
        .filter_by(name="–î–∂–æ—Ä–Ω–æ –î–∂–æ–≤–∞–Ω–Ω–∞", save_id=1)
        .first()
    )
    brief = "–§–∏–Ω–∞–ª—å–Ω—ã–π –±–æ–π"
    persons_quests.append(
        t.Person_Quest(
            person_id=npc.id,
            save_id=SID,
            quest_id=[q.id for q in quests if q.brief == brief][0],
        )
    ) if npc else None

    for pq in persons_quests:
        pq.is_done = False
    session.add_all(persons_quests)
    session.commit()
